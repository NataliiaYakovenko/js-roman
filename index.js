'use strict' // - це директива, яку включають на початку js-файлу для встановлення
//Задача. Написати функцію суми двох аргументів

function summa(arg1,arg2){ //Function Declaration
  return arg1 + arg2;
}
console.log(summa(1,2));
//------------------------------------------------------------------
const sum = (arg1,arg2)=>{              //Arrow Function
  return arg1 + arg2;
}
console.log(sum(2,4))

//скорочений варіант Arrow Function
const sum1 = (arg1,arg2)=>arg1 + arg2;
console.log(sum1(5,7));
//------------------------------------------------------------------
//Задача. Написати функцію, яка приймає число і виводить його у квадрат
const pow = number=>number**2;
//Але якщо функія не приймає аргументів взагалі тоді (пусті) обов'язкові
console.log(pow(5))
//------------------------------------------------------------------
//Функції - конструктор
const superFunc = ()=>{
  this.value = 'Hello';
}
//!!! This вказує на глобальну область видимості
//Нам потрібно щоб функція конструктор вказувала на свій власний контекст виконання
//Функція конструктор не може бути стрілочною
//Тому що нам потрібно щоб This вказував на контекст виконання в середині фнкції

//Arguments - це псевдомасив з аргументами, які ми передаємо при виклику нашій функції

//Arrow Function НЕ МАЄ Arguments
const t1 = ()=>{     
  console.log(arguments);   //Arguments не знайдено
}
t1('Hello','world','!!!!!')
//----------------------------------------------------------------------------

//ОСОБЛИВОСТІ Arrow Function
/*
1. Arrow Function не має свого власного контексту виконання,
вона завжди буде братиме найближчий доступний this, свого this вона не матиме.
2.Arrow Function не може бути функцією-конструктор.
3.Arrow Function НЕ МАЄ колекції Arguments
 */