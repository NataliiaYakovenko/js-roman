//Рекурсія

/*
Задача. Написати функцію, яка зводить число у певну ступінь і приймає 2 аргументс:
- число, яке потрібно піднести до ступеня  --x
- ступень, у яку потрібно піднести число   --n
*/

//варіант1 - Ітеративне мислення
function pow(x,n){
  let result = 1; //змінна у якій ми будемо накопичувати добуток
  //множимо result на x  n разів у циклі
for(let i = 0; i < n;i++){
  result *=x;
}
return result

}
console.log(pow(2,3));
//-------------------------------------------------------------------------------------
//варіант2 - Рекурсивне мислення- спростовуємо завдання і викликаємо функцією саму себе
function powRecursive(x,n){
  if(n===1){
    return x;
  }else{
    return x* powRecursive(x,n-1); //функція повертає саму себе на ступень меньше
  }
}
/*                    if(n===1){return x;}
                    /
powRecursive(x,n)
                   \
                      else { return x* powRecursive(x,n-1) }
*/       
//1. powRecursive(2,4)    //--->> 4 !== 1, тому else 2* powRecursive(2,3)  
//2. owRecursive(2,3)     //--->> 3 !== 1, тому else 2* powRecursive(2,2)   
//3. owRecursive(2,2)     //--->> 2 !== 1, тому else 2* powRecursive(2,1)    
//4. owRecursive(2,1)     //--->> 1 === 1, повертаємо х 2   

/* Ообливості роботи:
- Робить виклик функції простіше, а потім ще більш простішим
доки результат не стане очевидним (досягнення бази рекурсії)
- Рекурсивне рішення, як правило, коротше ніж ітераційне 
*/
//Кількість вкладених викликів - ци глибина рекурсії
//Ми прагнемо до того, що глибина рекурсії не має перевищити 10 000 викликів

//Stack - це колба, де зберігаються всі визвані фуекції
//Stack overflow - це коли кількість викликів перевищив ємність(об'єм) колби,
// в консолі буде помилка  Stack overflow 